{
  description = "zig2nix flake";

  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs";
    flake-utils.url = "github:numtide/flake-utils";
  };

  outputs = { flake-utils, nixpkgs, ... }: with builtins; let
    outputs = (flake-utils.lib.eachDefaultSystem (system: let
      _pkgs = nixpkgs.outputs.legacyPackages.${system};

      #! Structures.

      # Zig versions.
      # <https://ziglang.org/download/index.json>
      zigv = import ./versions.nix {
        inherit system;
        pkgs = _pkgs;
      };

      # Converts zon files to json
      zon2json = import tools/zon2json/default.nix {
        pkgs = _pkgs;
        zig = zigv.master;
      };

      # Converts build.zig.zon to nix
      zon2nix = _pkgs.writeShellApplication {
        name = "zon2nix";
        runtimeInputs = with _pkgs; [jq zon2json zigv.master ];
        text = ''
          if [[ ! -f "''${1:-build.zig.zon}" ]]; then
              printf -- "error: file does not exist: %s" "''${1:-build.zig.zon}" 1>&2
              exit 1
          fi

          tmpdir="$(mktemp -d)"
          trap 'rm -rf "$tmpdir"' EXIT
          read -r zig_cache < <(zig env | jq -r '.global_cache_dir')

          zon2json-recursive() {
            while {
              read -r url;
              read -r zhash;
            } do
              # Prevent dependency loop
              if [[ ! -f "$tmpdir/$zhash.read" ]]; then
                printf '{"%s": "%s"}\n' "$zhash" "$url"
                if [[ ! -d "$zig_cache/p/$zhash" ]]; then
                  printf -- 'fetching: %s\n' "$url" 1>&2
                  zig fetch "$url" 1>/dev/null
                fi
                if [[ -f "$zig_cache/p/$zhash/build.zig.zon" ]]; then
                  zon2json-recursive "$zig_cache/p/$zhash/build.zig.zon"
                fi
                touch "$tmpdir/$zhash.read"
              fi
            done < <(zon2json "$1" | jq -r '.dependencies | .[] | .url, .hash')
          }

          json2nix() {
            jq -r 'to_entries | .[] | .value, .key' | while {
              read -r url;
              read -r zhash;
            }; do
            sha256=$(nix-prefetch-url --type sha256 --unpack "$url")
            nhash="$(nix hash to-sri --type sha256 "$sha256")"
            cat <<EOF
            {
              name = "$zhash";
              path = fetchzip {
                url = "$url";
                hash = "$nhash";
              };
            }
          EOF
            done
          }

          cat <<EOF
          # generated by zon2nix (https://github.com/Cloudef/zig2nix)

          { linkFarm, fetchzip }:

          linkFarm "zig-packages" [
          $(zon2json-recursive "''${1:-build.zig.zon}" | jq -s add | json2nix)
          ]
          EOF
        '';
      };

      #: Helper function for building and running Zig projects.
      zig-env = {
        # Overrideable nixpkgs.
        pkgs ? _pkgs,
        # Zig version to use. Normally there is no need to change this.
        zig ? zigv.default,
        # Additional runtime deps to inject into the helpers.
        customRuntimeDeps ? [],
        # Additional runtime libs to inject to the helpers.
        # Gets included in LD_LIBRARY_PATH and DYLD_LIBRARY_PATH.
        customRuntimeLibs ? [],
        # Custom prelude in the flake app helper.
        customAppHook ? "",
        # Custom prelude in the flake shell helper.
        customDevShellHook ? "",
        # Enable Wayland support.
        enableWayland ? false,
        # Enable X11 support.
        enableX11 ? false,
      }: let
        lib = pkgs.lib;

        #! --- Outputs of zig-env {} function.
        #!     access: (zig-env {}).thing

        # Solving platform specific spaghetti below
        _linux_libs = with pkgs; [ vulkan-loader ]
          ++ lib.optionals (enableX11) [ xorg.libX11 ]
          ++ lib.optionals (enableWayland) [ wayland libxkbcommon ];
        _linux_extra = let
          ld_string = lib.makeLibraryPath (_linux_libs ++ customRuntimeLibs);
        in ''
          export ZIG_BTRFS_WORKAROUND=1
          export LD_LIBRARY_PATH="${ld_string}:''${LD_LIBRARY_PATH:-}"
        '';

        _darwin_extra = let
          ld_string = lib.makeLibraryPath (customRuntimeLibs);
        in ''
          export DYLD_LIBRARY_PATH="${ld_string}:''${DYLD_LIBRARY_PATH:-}"
        '';

        _deps = [ zig ] ++ customRuntimeDeps
          ++ lib.optionals (pkgs.stdenv.isLinux) _linux_libs;
        _extraApp = customAppHook
          + lib.optionalString (pkgs.stdenv.isLinux) _linux_extra
          + lib.optionalString (pkgs.stdenv.isDarwin) _darwin_extra;
        _extraShell = customDevShellHook
          + lib.optionalString (pkgs.stdenv.isLinux) _linux_extra
          + lib.optionalString (pkgs.stdenv.isDarwin) _darwin_extra;
      in rec {
        #! Inherit given pkgs and zig version
        inherit pkgs zig zon2json zon2nix;

        #: Flake app helper (Without zig-env and root dir restriction).
        app-bare-no-root = deps: script: {
          type = "app";
          program = toString (pkgs.writeShellApplication {
            name = "app";
            runtimeInputs = [] ++ deps;
            text = ''
              # shellcheck disable=SC2059
              error() { printf -- "error: $1" "''${@:2}" 1>&2; exit 1; }
              ${script}
              '';
          }) + "/bin/app";
        };

        #! Flake app helper (Without zig-env).
        app-bare = deps: script: app-bare-no-root deps ''
          [[ -f ./flake.nix ]] || error 'Run this from the project root'
          ${script}
          '';

        #! Flake app helper (without root dir restriction).
        app-no-root = deps: script: app-bare-no-root (deps ++ _deps) ''
          ${_extraApp}
          ${script}
          '';

        #! Flake app helper.
        app = deps: script: app-bare (deps ++ _deps) ''
          ${_extraApp}
          ${script}
          '';

        #: Creates dev shell.
        shell = pkgs.mkShell {
          buildInputs = _deps;
          shellHook = _extraShell;
        };

        #! Packages zig project.
        #! NOTE: If your project has build.zig.zon you must first generate build.zig.zon.nix using zon2nix.
        #!       It is recommended to commit the build.zig.zon.nix to your repo.
        #! <https://github.com/NixOS/nixpkgs/blob/master/doc/hooks/zig.section.md>
        package = attrs: let
          build-zig-zon-path = if attrs ? build-zig-zon then attrs.build-zig-zon else "${attrs.src}/build.zig.zon";
          has-build-zig-zon = pathExists build-zig-zon-path;
          has-build-zig-zon-nix = pathExists "${build-zig-zon-path}.nix";
          build-zig-zon = fromJSON (readFile (pkgs.runCommandLocal "build.zig.zon.json" {} ''
            ${zon2json}/bin/zon2json "${build-zig-zon-path}" > "$out"
            ''));
        in pkgs.stdenvNoCC.mkDerivation (lib.optionalAttrs (has-build-zig-zon) {
            pname = build-zig-zon.name;
            version = build-zig-zon.version;
          } // attrs // {
            nativeBuildInputs = [ zig.hook ] ++ lib.optionals (attrs ? nativeBuildInputs) attrs.nativeBuildInputs;
            postPatch = lib.optionalString (attrs ? postPatch) attrs.postPatch
              + lib.optionalString (has-build-zig-zon-nix) ''
                ln -s ${pkgs.callPackage "${build-zig-zon-path}.nix" {}} "$ZIG_GLOBAL_CACHE_DIR"/p
                '';
        });
      };

      # Default zig env used by this flake
      env = zig-env {};
      app = env.app-bare;
      app-no-root = env.app-no-root;
    in rec {
      #! --- Architecture dependent flake outputs.
      #!     access: `zig2nix.outputs.thing.${system}`

      #! Helper function for building and running Zig projects.
      inherit zig-env;

      #! Versioned Zig packages.
      packages.zig = zigv;

      #! zon2json: Converts zon files to json
      packages.zon2json = zon2json;

      #! zon2nix: Converts build.zig.zon files to nix
      packages.zon2nix = zon2nix;

      #! Default zig package.
      #! Latest released zig.
      packages.default = zigv.default;

      #! Run zon2json
      apps.zon2json = app-no-root [zon2json] ''zon2json "$@"'';

      #! Run zon2nix
      apps.zon2nix = app-no-root [zon2nix] ''zon2nix "$@"'';

      #! Run a version of a Zig compiler inside a `zig-env`.
      #! nix run#zig."zig-version"
      #! example: nix run#zig.master
      apps.zig = mapAttrs (k: v: (zig-env {zig = v;}).app-no-root [] ''zig "$@"'') zigv;

      #! Run a version of a Zig compiler inside a `zig-env` (With Wayland support).
      #! nix run#zig-wayland."zig-version"
      #! example: nix run#zig-wayland.master
      apps.zig-wayland = mapAttrs (k: v: (zig-env {zig = v; enableWayland = true;}).app-no-root [] ''zig "$@"'') zigv;

      #! Run a version of a Zig compiler inside a `zig-env` (With X11 support).
      #! nix run#zig-x11."zig-version"
      #! example: nix run#zig-x11.master
      apps.zig-x11 = mapAttrs (k: v: (zig-env {zig = v; enableX11 = true;}).app-no-root [] ''zig "$@"'') zigv;

      #! Run a latest released version of a Zig compiler inside a `zig-env`.
      #! nix run
      apps.default = apps.zig.default;

      #! Develop shell for building and running Zig projects.
      #! nix develop#zig."zig-version"
      #! example: nix develop#zig.master
      devShells.zig = mapAttrs (k: v: (zig-env {zig = v;}).shell) zigv;

      #! Develop shell for building and running Zig projects. (With Wayland support)
      #! nix develop#zig-wayland."zig-version"
      #! example: nix develop#zig-wayland.master
      devShells.zig-wayland = mapAttrs (k: v: (zig-env {zig = v; enableWayland = true;}).shell) zigv;

      #! Develop shell for building and running Zig projects. (With X11 support)
      #! nix develop#zig-x11."zig-version"
      #! example: nix develop#zig-x11.master
      devShells.zig-x11 = mapAttrs (k: v: (zig-env {zig = v; enableX11 = true;}).shell) zigv;

      #! Develop shell for building and running Zig projects.
      #! Uses latest released version of Zig.
      #! nix develop
      devShells.default = devShells.zig.default;

      #! Develop shell for building and running Zig projects (with Wayland support).
      #! Uses latest released version of Zig.
      #! nix develop
      devShells.wayland = devShells.zig-wayland.default;

      #! Develop shell for building and running Zig projects (with X11 support).
      #! Uses latest released version of Zig.
      #! nix develop
      devShells.x11 = devShells.zig-x11.default;

      # nix run .#update-versions
      apps.update-versions = with env.pkgs; app [ curl jq ] ''
        tmpdir="$(mktemp -d)"
        trap 'rm -rf "$tmpdir"' EXIT
        curl https://ziglang.org/download/index.json |\
          jq 'with_entries(select(.key != "0.1.1" and .key != "0.2.0" and .key != "0.3.0" and .key != "0.4.0" and .key != "0.5.0" and .key != "0.6.0" and .key != "0.7.0" and .key != "0.7.1"))' > "$tmpdir"/versions.json
        jq 'to_entries | {"default": ({"version": .[1].key} + .[1].value)}' "$tmpdir/versions.json" | cat "$tmpdir/versions.json" - | jq -s add
        '';

      # nix run .#update-templates
      apps.update-templates = with env.pkgs; app [ coreutils ] ''
        rm -rf templates/default
        mkdir -p templates/default
        sed 's#/[*]SED_ZIG_VER[*]/##' templates/flake.nix > templates/default/flake.nix
        cp -f templates/flake.nix templates/default/flake.nix
        cp -f .gitignore templates/default/.gitignore
        cp -f .gitattributes templates/default/.gitattributes
        (cd templates/default; ${packages.zig.default}/bin/zig init || ${packages.zig.default}/bin/zig init-exe)

        rm -rf templates/master
        mkdir -p templates/master
        # shellcheck disable=SC2016
        sed 's#/[*]SED_ZIG_VER[*]/# zig = zig2nix.outputs.packages.''${system}.zig.master; #' templates/flake.nix > templates/master/flake.nix
        cp -f .gitignore templates/master/.gitignore
        cp -f .gitattributes templates/master/.gitattributes
        (cd templates/master; ${packages.zig.master}/bin/zig init)
        '';

      # nix run .#test
      apps.test = app [] ''
        (cd templates/default; nix run --override-input zig2nix ../..  .)
        (cd templates/default; nix run --override-input zig2nix ../..  .#test)
        (cd templates/default; nix build --override-input zig2nix ../.. .)
        rm -f templates/default/result
        rm -rf templates/default/zig-out
        rm -rf templates/default/zig-cache
        (cd templates/master; nix run --override-input zig2nix ../..  .)
        (cd templates/master; nix run --override-input zig2nix ../..  .#test)
        (cd templates/master; nix build --override-input zig2nix ../.. .)
        rm -f templates/master/result
        rm -rf templates/master/zig-out
        rm -rf templates/master/zig-cache
        '';

      # nix run .#readme
      apps.readme = let
        project = "zig2nix flake";
      in with env.pkgs; app [ gawk jq ] (replaceStrings ["`"] ["\\`"] ''
      cat <<EOF
      # ${project}

      Flake for packaging, building and running Zig projects.

      https://ziglang.org/

      ---

      [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

      * Zig master: `${zigv.master.version} @ ${zigv.master.date}`
      * Zig default: `${zigv.default.version} @ ${zigv.default.date}`

      ## Zig project template

      ```bash
      nix flake init -t github:Cloudef/zig2nix
      nix run .
      # for more options check the flake.nix file
      ```

      ### With master version of Zig

      ```bash
      nix flake init -t github:Cloudef/zig2nix#master
      nix run .
      # for more options check the flake.nix file
      ```

      ## Running zig compiler directly

      ```bash
      nix run github:Cloudef/zig2nix -- version
      ```

      ## Shell for building and running a Zig project

      ```bash
      nix develop github:Cloudef/zig2nix
      ```

      ## Crude documentation

      Below is auto-generated dump of important outputs in this flake.

      ```nix
      $(awk -f doc.awk flake.nix | sed "s/```/---/g;s/\(app-bare.*\)${"''"}$/\1/")
      ```
      EOF
      '');

      # for env.package testing
      packages.test = env.package { src = ./tools/zon2json; };

      # for debugging
      apps.repl = flake-utils.lib.mkApp {
        drv = env.pkgs.writeShellScriptBin "repl" ''
          confnix=$(mktemp)
          echo "builtins.getFlake (toString $(git rev-parse --show-toplevel))" >$confnix
          trap "rm $confnix" EXIT
          nix repl $confnix
          '';
      };
    }));
  in outputs // rec {
      #! --- Generic flake outputs.
      #!     access: `zig2nix.outputs.thing`

      #: Overlay for overriding Zig with specific version.
      overlays.zig = mapAttrs (k: v: (final: prev: {
        zig = v;
        zon2json = outputs.packages.zon2json;
        zon2nix = outputs.packages.zon2nix;
      })) outputs.packages.${prev.system}.zig;

      #: mitchellh/zig-overlay compatible overlay.
      overlays.zig-overlay = final: prev: {
        zigpkgs = outputs.packages.${prev.system}.zig;
      };

      #! Default overlay
      overlays.default = overlays.zig.default;

      #: Default project template
      #: nix flake init -t templates
      templates.default = rec {
        path = ./templates/default;
        description = "Default Zig project template";
        welcomeText = ''
          # ${description}
          - Zig: https://ziglang.org/

          ## Build & Run

          ```
          nix run .
          ```

          See flake.nix for more options.
          '';
      };

      #: Master project template
      #: nix flake init -t templates
      templates.master = rec {
        path = ./templates/master;
        description = "Master Zig project template";
        welcomeText = ''
          # ${description}
          - Zig: https://ziglang.org/

          ## Build & Run

          ```
          nix run .
          ```

          See flake.nix for more options.
          '';
      };
    };
}
