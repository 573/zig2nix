{
    zon2json-lock
    , writeShellApplication
    , jq
    , coreutils
}:

writeShellApplication {
    name = "zon2nix";
    runtimeInputs = [ zon2json-lock jq coreutils ];
    text = ''
      path="''${1:-build.zig.zon}"

      # Call zon2json-lock automatically if needed
      # Requires network access
      if [[ "$path" == *.zig.zon ]]; then
        if [[ ! -f "''${path}2json-lock" ]]; then
          zon2json-lock "$path"
        fi
        path="''${path}2json-lock"
      fi

      if [[ ! -f "$path" ]]; then
          printf -- "error: file does not exist: %s" "$path" 1>&2
          exit 1
      fi

      cat <<'EOF'
      # generated by zon2nix (https://github.com/Cloudef/zig2nix)

      { lib, linkFarm, fetchurl, fetchgit, runCommandLocal, unzip, glibcLocalesUtf8, name ? "zig-packages" }:

      with builtins;
      with lib;

      let
        unpackZigArtifact = { name, artifact }: runCommandLocal name {
            nativeBuildInputs = [ unzip glibcLocalesUtf8 ];
          } ${"''"}
            unpackDir="$TMPDIR/unpack"
            mkdir "$unpackDir"
            cd "$unpackDir"
            unpackFile "''${artifact}"
            chmod -R +w "$unpackDir"
            if [ $(find "$unpackDir" -mindepth 1 -maxdepth 1 | wc -l) != 1 ]; then
              mv "$unpackDir" "$out"
            else
              fn="$(find "$unpackDir" -mindepth 1 -maxdepth 1)"
              if [ -f "$fn" ]; then
                mkdir $out
              fi
              mv "$fn" "$out"
            fi
            chmod 755 "$out"
          ${"''"};

        # This is non-recursive hash version of:
        # https://github.com/NixOS/nixpkgs/blob/master/pkgs/build-support/fetchzip/default.nix
        fetchZipNonRecursive = { name, url, hash }: let
          artifact = fetchurl { inherit url hash; };
        in unpackZigArtifact { inherit name artifact; };

        fetchGitZig = { name, url, hash }: let
          parts = splitString "#" url;
          base = elemAt parts 0;
          rev = elemAt parts 1;
        in fetchgit {
          inherit name rev hash;
          url = base;
          deepClone = false;
        };

        fetchZigArtifact = { name, url, hash }: let
          parts = splitString "://" url;
          proto = elemAt parts 0;
          path = elemAt parts 1;
          fetcher = {
            "git+http" = fetchGitZig { inherit name hash; url = "http://''${path}"; };
            "git+https" = fetchGitZig { inherit name hash; url = "https://''${path}"; };
            http = fetchZipNonRecursive { inherit name hash; url = "http://''${path}"; };
            https = fetchZipNonRecursive { inherit name hash; url = "https://''${path}"; };
            file = unpackZigArtifact { inherit name; artifact = /. + path; };
          };
        in fetcher.''${proto};
      in linkFarm name [
      EOF

      while {
        read -r zhash;
        read -r name;
        read -r url;
        read -r ahash;
      } do
        cat <<EOF
        {
          name = "$zhash";
          path = fetchZigArtifact {
            name = "$name";
            url = "$url";
            hash = "$ahash";
          };
        }
      EOF
      done < <(jq -r 'to_entries | .[] | .key, .value.name, .value.url, .value.hash' "$path")
      printf ']'
      '';
}
