{
    pkgs ? import <nixpkgs> {}
    , writeShellApplication ? pkgs.writeShellApplication
    , zon2json-lock
    , jq ? pkgs.jq
    , coreutils ? pkgs.coreutils
}:

writeShellApplication {
    name = "zon2nix";
    runtimeInputs = [ zon2json-lock jq coreutils ];
    text = ''
      path="''${1:-build.zig.zon}"

      # Call zon2json-lock automatically if needed
      # Requires network access
      if [[ "$path" == *.zig.zon ]]; then
        if [[ ! -f "''${path}2json-lock" ]]; then
          zon2json-lock "$path" > "''${path}2json-lock"
        fi
        path="''${path}2json-lock"
      fi

      if [[ ! -f "$path" ]]; then
          printf -- "error: file does not exist: %s" "$path" 1>&2
          exit 1
      fi

      cat <<'EOF'
      # generated by zon2nix (https://github.com/Cloudef/zig2nix)

      { linkFarm, fetchurl, runCommandLocal, unzip, glibcLocalesUtf8 }:

      let
        # This is non-recursive hash version of:
        # https://github.com/NixOS/nixpkgs/blob/master/pkgs/build-support/fetchzip/default.nix
        fetchZigArtifact = { url, hash }: let
          tmpFilename = baseNameOf url;
          artifact = fetchurl { inherit url hash; };
        in runCommandLocal "fetchZigArtifact" {
            nativeBuildInputs = [ unzip glibcLocalesUtf8 ];
          } ${"''"}
            unpackDir="$TMPDIR/unpack"
            mkdir "$unpackDir"
            cd "$unpackDir"
            unpackFile "''${artifact}"
            chmod -R +w "$unpackDir"
            if [ $(find "$unpackDir" -mindepth 1 -maxdepth 1 | wc -l) != 1 ]; then
              mv "$unpackDir" "$out"
            else
              fn=$(cd "$unpackDir" && ls -A)
              if [ -f "$unpackDir/$fn" ]; then
                mkdir $out
              fi
              mv "$unpackDir/$fn" "$out"
            fi
            chmod 755 "$out"
          ${"''"};
      in linkFarm "zig-packages" [
      EOF

      while {
        read -r zhash;
        read -r url;
        read -r ahash;
      } do
        cat <<EOF
        {
          name = "$zhash";
          path = fetchZigArtifact {
            url = "$url";
            hash = "$ahash";
          };
        }
      EOF
      done < <(jq -r 'to_entries | .[] | .key, .value.url, .value.hash' "$path")
      printf ']'
      '';
}
